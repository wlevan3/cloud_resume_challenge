name: "Terraform Plan"
on: push
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  actions: read
  security-events: write

jobs:
  plan:
    # name: "Terraform Plan"
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          ignore-unfixed: false
          format: "sarif"
          output: "trivy-fs-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-fs-results.sarif"
          category: "filesystem"

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "config"
          hide-progress: false
          format: "sarif"
          output: "trivy-iac-results.sarif"
          exit-code: "0"
          ignore-unfixed: false
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-iac-results.sarif"
          category: "infrastructure"

      # - run: echo ${{ steps.plan.outputs.stdout }}
      # - run: echo ${{ steps.plan.outputs.stderr }}
      # - run: echo ${{ steps.plan.outputs.exitcode }}

      # - uses: hashicorp/setup-terraform@v3
      # - name: Upload Configuration
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });

  apply:
    needs: [plan]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{vars.AWS_ACCOUNT_ID}}:role/${{vars.ROLE_NAME}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ vars.AWS_REGION }}
      - name: Terraform
        uses: hashicorp/setup-terraform@v3
      - run: pwd
      - run: ls -al
      - run: terraform -chdir=./infrastructure init
      - run: sed -i.tmp "s/AWSREGION/${{vars.AWS_REGION}}/g" ./infrastructure/providers.tf
      - id: plan
        run: terraform -chdir=./infrastructure plan -out=development.tfplan  -var-file=./environments/development.tfvars
